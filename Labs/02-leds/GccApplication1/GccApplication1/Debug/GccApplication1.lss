
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000667  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001571  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/* Toggle two LEDs with the push button. */
int main(void) {

    // Set output pins of two LEDs to low level
    // LED_GREEN
    DDRB = DDRB | _BV(LED_GREEN);       // or: Set bit to 1
  80:	25 9a       	sbi	0x04, 5	; 4
    PORTB = PORTB & ~_BV(LED_GREEN);    // and: Clear bit to 0
  82:	2d 98       	cbi	0x05, 5	; 5
    // LED_RED
    DDRB = DDRB | _BV(LED_RED);
  84:	20 9a       	sbi	0x04, 0	; 4
    PORTB = PORTB & ~_BV(LED_RED);
  86:	28 98       	cbi	0x05, 0	; 5

    /* Configure input pin of push button and enable internal pull-up
       resistor */
    DDRD = DDRD & ~_BV(BTN_BLUE);       // DDRD2 = 0
  88:	52 98       	cbi	0x0a, 2	; 10
    PORTD = PORTD | _BV(BTN_BLUE);      // PORTD2 = 1
  8a:	5a 9a       	sbi	0x0b, 2	; 11
    // Infinite loop
    for (;;) {
        // Test if push button value is low
        if (bit_is_clear(PIND, BTN_BLUE)) {
            // Invert LED and delay
            PORTB = PORTB ^ _BV(LED_GREEN); // xor: Invert bit
  8c:	20 e2       	ldi	r18, 0x20	; 32
            PORTB = PORTB ^ _BV(LED_RED);
  8e:	91 e0       	ldi	r25, 0x01	; 1
    PORTD = PORTD | _BV(BTN_BLUE);      // PORTD2 = 1

    // Infinite loop
    for (;;) {
        // Test if push button value is low
        if (bit_is_clear(PIND, BTN_BLUE)) {
  90:	4a 99       	sbic	0x09, 2	; 9
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x10>
            // Invert LED and delay
            PORTB = PORTB ^ _BV(LED_GREEN); // xor: Invert bit
  94:	85 b1       	in	r24, 0x05	; 5
  96:	82 27       	eor	r24, r18
  98:	85 b9       	out	0x05, r24	; 5
            PORTB = PORTB ^ _BV(LED_RED);
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	89 27       	eor	r24, r25
  9e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	3f e9       	ldi	r19, 0x9F	; 159
  a2:	46 e8       	ldi	r20, 0x86	; 134
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	31 50       	subi	r19, 0x01	; 1
  a8:	40 40       	sbci	r20, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
  b2:	ee cf       	rjmp	.-36     	; 0x90 <main+0x10>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
